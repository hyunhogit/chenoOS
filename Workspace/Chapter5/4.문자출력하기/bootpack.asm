[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_font_A.0
	EXTERN	_io_hlt
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
[FILE "bootpack.c"]
[SECTION .data]
_font_A.0:
	DB	0
	DB	24
	DB	24
	DB	24
	DB	24
	DB	36
	DB	36
	DB	36
	DB	36
	DB	126
	DB	66
	DB	66
	DB	66
	DB	-25
	DB	0
	DB	0
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	_init_pallette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_init_screen
	PUSH	_font_A.0
	PUSH	0
	PUSH	10
	PUSH	10
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putFont8
	ADD	ESP,36
L2:
	CALL	_io_hlt
	JMP	L2
[SECTION .data]
_table_rgb.1:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_pallette
_init_pallette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.1
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_io_load_eflags
	MOV	DWORD [-16+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,EDI
	POP	EAX
	POP	EDX
	JLE	L11
L13:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
L11:
	MOV	AL,BYTE [ESI]
	INC	EBX
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [1+ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [2+ESI]
	SHR	AL,2
	ADD	ESI,3
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	CMP	EBX,EDI
	JLE	L11
	JMP	L13
	GLOBAL	_boxfill8
_boxfill8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EDI
	PUSH	EDI
	MOV	AL,BYTE [16+EBP]
	MOV	ECX,DWORD [24+EBP]
	MOV	EDI,DWORD [28+EBP]
	MOV	BYTE [-13+EBP],AL
	CMP	ECX,DWORD [32+EBP]
	JG	L26
	MOV	EBX,DWORD [12+EBP]
	IMUL	EBX,ECX
L24:
	MOV	EDX,DWORD [20+EBP]
	CMP	EDX,EDI
	JG	L28
	MOV	EAX,DWORD [8+EBP]
	ADD	EAX,EBX
	LEA	EAX,DWORD [EAX+EDX*1]
	MOV	DWORD [-20+EBP],EAX
L23:
	MOV	ESI,DWORD [-20+EBP]
	MOV	AL,BYTE [-13+EBP]
	INC	EDX
	MOV	BYTE [ESI],AL
	INC	ESI
	MOV	DWORD [-20+EBP],ESI
	CMP	EDX,EDI
	JLE	L23
L28:
	INC	ECX
	ADD	EBX,DWORD [12+EBP]
	CMP	ECX,DWORD [32+EBP]
	JLE	L24
L26:
	POP	EBX
	POP	ESI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_screen
_init_screen:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [12+EBP]
	SUB	EAX,15
	DEC	EBX
	PUSH	EAX
	MOV	DWORD [-16+EBP],EAX
	PUSH	EBX
	PUSH	0
	PUSH	0
	PUSH	10
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	EBX
	SUB	EAX,14
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	DWORD [-16+EBP]
	PUSH	0
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EDI,DWORD [16+EBP]
	SUB	EDI,13
	PUSH	EDI
	PUSH	30
	PUSH	EDI
	PUSH	1
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,2
	MOV	DWORD [-20+EBP],EAX
	PUSH	EAX
	PUSH	1
	PUSH	EDI
	PUSH	1
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	DWORD [-20+EBP]
	PUSH	30
	PUSH	DWORD [-20+EBP]
	PUSH	1
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-20+EBP]
	PUSH	30
	PUSH	EDI
	PUSH	30
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	ESI,DWORD [12+EBP]
	MOV	EBX,DWORD [12+EBP]
	SUB	ESI,30
	PUSH	DWORD [-20+EBP]
	SUB	EBX,2
	PUSH	EBX
	PUSH	DWORD [-20+EBP]
	PUSH	ESI
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-20+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	EBX
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	EDI
	PUSH	EBX
	PUSH	EDI
	PUSH	ESI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-20+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	ESI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putFont8
_putFont8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	XOR	EBX,EBX
	PUSH	EAX
	MOV	EDI,DWORD [20+EBP]
	MOV	ESI,DWORD [28+EBP]
	MOV	CL,BYTE [24+EBP]
L43:
	LEA	EAX,DWORD [EBX+EDI*1]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	MOV	EDX,EAX
	ADD	EDX,DWORD [16+EBP]
	CMP	BYTE [EBX+ESI*1],0
	JNS	L35
	MOV	BYTE [EDX],CL
L35:
	MOV	AL,BYTE [EBX+ESI*1]
	AND	EAX,64
	TEST	AL,AL
	JE	L36
	MOV	BYTE [1+EDX],CL
L36:
	MOV	AL,BYTE [EBX+ESI*1]
	AND	EAX,32
	TEST	AL,AL
	JE	L37
	MOV	BYTE [2+EDX],CL
L37:
	MOV	AL,BYTE [EBX+ESI*1]
	AND	EAX,16
	TEST	AL,AL
	JE	L38
	MOV	BYTE [3+EDX],CL
L38:
	MOV	AL,BYTE [EBX+ESI*1]
	AND	EAX,8
	TEST	AL,AL
	JE	L39
	MOV	BYTE [4+EDX],CL
L39:
	MOV	AL,BYTE [EBX+ESI*1]
	AND	EAX,4
	TEST	AL,AL
	JE	L40
	MOV	BYTE [5+EDX],CL
L40:
	MOV	AL,BYTE [EBX+ESI*1]
	AND	EAX,2
	TEST	AL,AL
	JE	L41
	MOV	BYTE [6+EDX],CL
L41:
	MOV	AL,BYTE [EBX+ESI*1]
	AND	EAX,1
	TEST	AL,AL
	JE	L33
	MOV	BYTE [7+EDX],CL
L33:
	INC	EBX
	CMP	EBX,15
	JLE	L43
	POP	EAX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
